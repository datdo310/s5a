############################################################
# v0r01: 2017/03/08 Y.Oda: 1st for RV28F base on RV40F script
# v0r02: 2017/06/20 Y.Oda: change frequency margin formulra
# v0r03: 2017/06/27 Y.Oda: LVT -> ULVT
# v0r04: 2019/01/10 Change Initial Transition 9999.999->99999.999
# v0r05: 2020/08/19 T.Manaka: Add RV28F TSMC
############################################################
############################################################
# Set MaxTransition for low drive cell main script
#     Generated by make_DRV_script V03.01.00
############################################################
############################################################
# set constraint factors
############################################################
# time scale factor
set Tunit [get_attribute [current_design] time_unit_in_second]
set Tfactor [expr 1.0e-9/$Tunit]
# capacitance scale factor
set Cunit [get_attribute [current_design] capacitance_unit_in_farad]
set Cfactor [expr 1.0e-12/$Cunit]

############################################################
# source utility procedures
############################################################
#if { ![info exists DLCLT_UTIL_PATH] } {
#    set DLCLT_UTIL_PATH "/design04/M28PT_D_ME/02_STA/STA_tool/drv_release_2017-04-26/DELAYCALC_LITE/utility"
#}
#source ${DLCLT_UTIL_PATH}/get_min_period.tcl
#source ${DLCLT_UTIL_PATH}/get_half_cycle_path_v3.tcl
#
############################################################
# source constraint setting procedures
############################################################
# lowdrv constraint setting procedure
#if { ![info exists DLCLT_MAXTRAN_LOWDRV_PROC_TCL] } {
#    source /design04/M28PT_D_ME/02_STA/STA_tool/drv_release_2017-04-26/eval01_tsmc/drv_scr/dlclt_maxtran_lowdrv_proc.scr
#} else {
#    source $DLCLT_MAXTRAN_LOWDRV_PROC_TCL
#}

############################################################
# define global variables
############################################################
global DLCLT_HalfCyclePath
# Period limit for half cycle check
if { [info exists DLCLT_HALF_CYCLE_MAXTRAN_PERIOD_LIMIT] } {
    set DLCLT_HALF_CYCLE_MAXTRAN_PERIOD_LIMIT [expr $DLCLT_HALF_CYCLE_MAXTRAN_PERIOD_LIMIT * $Tfactor]
} else {
    set DLCLT_HALF_CYCLE_MAXTRAN_PERIOD_LIMIT 1.0e9
}

### suppress PTE-079 warning
suppress_message PTE-079

#############################################################
## Main routine
#############################################################
if {[info exist PTECO_FIX_DRC]} {
    puts "* Information : Skip Reset maxtran constraints."
    set overwrite 0
} else {
    puts "* Information : Reset maxtran constraints."
    set_max_transition 99999.999 [get_pins * -hier]
    set_max_transition 99999.999 -data_path [all_clocks]
    set_max_transition 99999.999 -clock_path [all_clocks]
    set overwrite 1
}


### suppress PTE-079 warning
suppress_message PTE-079

### set maxtran lowdrv flag
global DLCLT_SET_MAXTRAN_LOWDRV_FLAG
set DLCLT_SET_MAXTRAN_LOWDRV_FLAG 0

### main routine for normal cycle path
# define overwrite flag 1(true)
# set overwrite 1 ;# Comment out for PTECO
set RV28F_MAXTRAN_LOWDRV_Vall_TMIN0 [expr 2.05e-09/$Tunit/(1+$MAXTRANCAP_FREQ_RELAX)]   ;# over 400MHz
set RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 [expr 3.20e-09/$Tunit/(1+$MAXTRANCAP_FREQ_RELAX)]   ;# Over 300MHz
set RV28F_MAXTRAN_LOWDRV_Vall_TMIN1 [expr 3.20e-09/$Tunit/(1+$MAXTRANCAP_FREQ_RELAX)]   ;# Over 300MHz

### main loop for THH
foreach_in_collection inst [get_cells * -hier -quiet -filter "ref_name=~THH*X*&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]

    # get drive
    if { [regexp {^THH\S*X(\d+)$} $lib_cell_name match drive] == 0 } { continue }
    # trim ^0
    regsub {^0+} $drive {} drive
    if { $drive == "" } { set drive 0 }

    # check drive limit
    if { [RV28F_check_drive_limit_THH $drive] == 0 } { continue }

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set maxtran lowdrv cell's pin
    foreach_in_collection pin $outpins {
        # get minimum period
        set path_flag [get_attribute $pin dlclt_clk_path_flag]
        set period [get_min_period $pin "out" $path_flag]
        #if { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN0 && $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } ;# remove for analyzing over 480MHz
        if { $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } {
            # y.oda Warning: this will be change new lowdrive constraints 
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_THH $pin $drive $overwrite
        } elseif { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN1 } {
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_THH $pin $drive $overwrite
        }

    }
}

### main loop for TSH
foreach_in_collection inst [get_cells * -hier -quiet -filter "ref_name=~TSH*X*&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]

    # get drive
    if { [regexp {^TSH\S*X(\d+)$} $lib_cell_name match drive] == 0 } { continue }
    # trim ^0
    regsub {^0+} $drive {} drive
    if { $drive == "" } { set drive 0 }

    # check drive limit
    if { [RV28F_check_drive_limit_TSH $drive] == 0 } { continue }

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set maxtran lowdrv cell's pin
    foreach_in_collection pin $outpins {
        # get minimum period
        set path_flag [get_attribute $pin dlclt_clk_path_flag]
        set period [get_min_period $pin "out" $path_flag]
        #if { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN0 && $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } ;# remove for analyzing over 480MHz
        if { $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } {
            # y.oda Warning: this will be change new lowdrive constraints 
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_TSH $pin $drive $overwrite
        } elseif { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN1 } {
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_TSH $pin $drive $overwrite
        }

    }
}

### main loop for TULH
foreach_in_collection inst [get_cells * -hier -quiet -filter "ref_name=~TULH*X*&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]

    # get drive
    if { [regexp {^TULH\S*X(\d+)$} $lib_cell_name match drive] == 0 } { continue }
    # trim ^0
    regsub {^0+} $drive {} drive
    if { $drive == "" } { set drive 0 }

    # check drive limit
    if { [RV28F_check_drive_limit_TULH $drive] == 0 } { continue }

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set maxtran lowdrv cell's pin
    foreach_in_collection pin $outpins {
        # get minimum period
        set path_flag [get_attribute $pin dlclt_clk_path_flag]
        set period [get_min_period $pin "out" $path_flag]
        #if { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN0 && $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } ;# remove for analyzing over 480MHz
        if { $period < $RV28F_MAXTRAN_LOWDRV_Vall_TMAX0 } {
            # y.oda Warning: this will be change new lowdrive constraints 
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_TULH $pin $drive $overwrite
        } elseif { $period >= $RV28F_MAXTRAN_LOWDRV_Vall_TMIN1 } {
            RV28F_set_maxtran_lowdrv_Vall_Fto300MHz_TULH $pin $drive $overwrite
        }

    }
}

### main loop for SVT
foreach_in_collection inst [get_cells * -hier -quiet -filter "(ref_name=~*D*BWP*&&ref_name!~*D*BWP*HVT&&ref_name!~*D*BWP*ULVT)&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]
    # get drive
    if { [regexp {\S*D(\d+)BWP\S*} $lib_cell_name match drive] != 0 } {
        # set drive value
        if { [regexp {^0\d} $drive] } {
            set drive [regsub {^0} $drive "0."]
        }

    } elseif { [regexp {\S*D(\d+)P(\d+)BWP\S*} $lib_cell_name match d1 d2] != 0 } {
        set drive "${d1}.${d2}"
    } else {
        continue
    }
    set drive [expr $drive * 10.0]

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set all range constraint
    RV28FT_set_maxtran_lowdrv_Vall_Fall_SVT $outpins $drive $overwrite
}

### main loop for HVT
foreach_in_collection inst [get_cells * -hier -quiet -filter "(ref_name=~*D*BWP*HVT)&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]
    # get drive
    if { [regexp {\S*D(\d+)BWP\S*HVT} $lib_cell_name match drive] != 0 } {
        # set drive value
        if { [regexp {^0\d} $drive] } {
            set drive [regsub {^0} $drive "0."]
        }

    } elseif { [regexp {\S*D(\d+)P(\d+)BWP\S*HVT} $lib_cell_name match d1 d2] != 0 } {
        set drive "${d1}.${d2}"
    } else {
        continue
    }
    set drive [expr $drive * 10.0]

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set all range constraint
    RV28FT_set_maxtran_lowdrv_Vall_Fall_HVT $outpins $drive $overwrite
}

### main loop for ULVT
foreach_in_collection inst [get_cells * -hier -quiet -filter "(ref_name=~*D*BWP*ULVT)&&is_hierarchical==false"] {
    # get library cell name
    set lib_cell_name [get_attribute $inst ref_name]
    # get drive
    if { [regexp {\S*D(\d+)BWP\S*ULVT} $lib_cell_name match drive] != 0 } {
        # set drive value
        if { [regexp {^0\d} $drive] } {
            set drive [regsub {^0} $drive "0."]
        }

    } elseif { [regexp {\S*D(\d+)P(\d+)BWP\S*ULVT} $lib_cell_name match d1 d2] != 0 } {
        set drive "${d1}.${d2}"
    } else {
        continue
    }
    set drive [expr $drive * 10.0]

    # get output pins
    set outpins [get_pins -quiet -leaf -of $inst -filter "direction=~*out&&is_hierarchical==false"]
    if { $outpins == "" } { continue }

    # set all range constraint
    RV28FT_set_maxtran_lowdrv_Vall_Fall_ULVT $outpins $drive $overwrite
}

### unsuppress PTE-079 warning
unsuppress_message PTE-079

### Warning: no lowdrv cell
if { $DLCLT_SET_MAXTRAN_LOWDRV_FLAG == 0 } {
    puts "Warning(DLCLT): No low drive cell found."
}
